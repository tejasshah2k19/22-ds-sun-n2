array 
    insert 
    

1 
2  two - array array -> array


a=>  10  20  30    
                 i 
b => 5   17  19  25  26  55  95  105  
                         j

c => 5  10  17  19 20 25 26 30  55  95  105
                            k 

------------------------------------------------
ds -> 

stack  -> 

___
___
___
LiFo -> Stack   [add: push , remove : pop , peek top , display ]

add(){
    add();
}
main(){
    add();
}

FiFo -> Queue 

1) static  [ fix size ]
2) dynamic [ DMA - linked list ] 

notation 
1) prefix 
2) postfix
3) infix 



infix => a+b
prefix => +ab 
postfix => ab+ 



infix =>     a + b - c + d 
prefix =>    +ab - c + d 
            -+abc + d 
            +-+abcd 
infix =>     a + b - c + d 
postfix=>    ab+ - c + d 
             ab+c- + d 
             ab+c-d+

infix=>  a + b - c * d / f * g - h + k * l
prefix=> a + b - c * d / f * g - h + k * l
         a + b - *cd / f * g - h + k * l
         +--+ab*/*cdfgh*kl
         

infix=>  a + (b - c) * d / f * g - (h + k) * l
prefix=> 
            -+a*/*-bcdfg*+hkl


infix=>  a + (b - c) * d / f $ g - (h + k) * l ^ q $ x 
prefix=> -+a/*-bcd$fg*+hk^l$qx







infix =>     a + b - c + d 
prefix=>      +-+abcd 



                +
            a       - 
                  b   + 
                     c  d 


IN=>  A + B - C * D * E $ F $ g
PRE=>  + A - B * C * D $ $ E F G 

            + 
        A      - 
             B     * 
                C      * 
                    D      $  
                        E      $     
                            F     G

---------------------------------------------
SMA ->  implicit 

DMA -> user define explicit 

// malloc() -> block of X amount -> malloc(20); // 20 byte 
// calloc() ->  calloc(4,5); //20 byte 

// realloc() 

// free()


int main(){ 
    int a; //   gcc -> 4 byte  -> static 
    int x[5]; //20 byte 

    //25 byte 
    //30 byte 
    //16 byte free 

    //300 


}

---------------------------------------------

struct student { 
    name 
    batchType 
    fees 
    email
    password 
    struct student  *next; //NULL  
};

struct student *s;

s = malloc()  // 2000 


s = malloc() //  3000 

s = malloc() //  4000 

 



